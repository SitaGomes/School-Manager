name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: backend
        run: npm install

      - name: Set up environment
        run: echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > backend/.env

      - name: Run Prisma migrations
        working-directory: backend
        run: npx prisma migrate deploy

      - name: Run tests
        working-directory: backend
        run: npm test

  # deploy:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   if: success()

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Deploy to Docker
  #       working-directory: backend
  #       run: |
  #         docker build -t school-manager .
  #         docker run -d -p 3000:3000 -e DATABASE_URL=${{ secrets.DATABASE_URL }} school-manager

  #     - name: Clean up old Docker containers
  #       run: |
  #         docker container prune -f
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker Image
        working-directory: backend
        run: docker build -t school-manager .

      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Authenticate Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl auth whoami

      - name: Create Fly.io App
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl apps create school-manager || echo "App already exists"

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --remote-only --dockerfile ./Dockerfile -a school-manager
